#!/usr/bin/env python3

import argparse
import datetime
import os
import re

program_description = 'Make a new submission according to the latest contest template.'

def handle_input():
    parser = argparse.ArgumentParser(description=program_description)
    parser.add_argument( \
            '--name', \
            help='"Matt Laine"', \
            type=str, \
            required=True, \
            )
    parser.add_argument( \
            '--email', \
            help='"matt@brain-fuel.co"', \
            type=str, \
            required=True, \
            )
    parser.add_argument( \
            '--title', \
            help='"Radix Sort"', \
            type=str, \
            required=True, \
            )
    parser.add_argument( \
            '--verbose', '-v', \
            action='count', default=0, \
            help='Use this if you want to see all the file contents' \
            )
    return parser.parse_args()

def sanitize_input(contents: str) -> str:
    return re.sub(r"[^A-Za-z0-9 ]", "", contents).strip() \

def derive_folder_path_from_input(prog_input) -> str:
    hyphenated_title = sanitize_input(prog_input.title) \
            .lower() \
            .replace(' ','-')
    hyphenated_name = sanitize_input(prog_input.name) \
            .lower() \
            .replace(' ','-')
    return hyphenated_title + '-' + hyphenated_name

def derive_readme_content_from_input(prog_input) -> str:
    readme_file = open('templates/README.adoc')
    empty_readme_template = readme_file.read()
    readme_file.close()
    current_year = str(datetime.datetime.now().date().year)
    readme_template = empty_readme_template \
            .replace('<title>', prog_input.title) \
            .replace('<name of author>', prog_input.name) \
            .replace('<email>', prog_input.email) \
            .replace('<year>', current_year)
    return readme_template

def make_file_if_path_does_not_exist(contents: str, file_path: str, verbose: int = 0):
    if not os.path.exists(file_path):
        f = open(file_path, 'w')
        f.write(contents)
        print('   Made file "' + file_path + '"...')
        if verbose > 0:
            print('   Wrote the following contents to file: \n' + contents)
        f.close()
    else:
        print('   Skipped making file"' + file_path + '"...')
        if verbose > 0:
            f = open(file_path, 'r')
            print_blank_line()
            print('   File contents were already: \n\n' + f.read())
            f.close()
    print_blank_line()

def print_blank_line():
    print('')

def print_parsed_args(prog_input):
    print('You Entered:')
    print_blank_line()
    print('   Name:  ' + prog_input.name)
    print('   Email: ' + prog_input.email)
    print('   Title: ' + prog_input.title)
    print_blank_line()

def print_whether_file_or_folder_exists(folder_path: str):
    if os.path.exists(folder_path):
        print('Path "' + folder_path + '" already exists.')
    else:
        print('Path "' + folder_path + '" does not exist.')
    print_blank_line()

def ensure_folder_exists(folder_path: str):
    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
        print('   Made folder "' + folder_path + '"...')
    else:
        print('   Skipped making folder"' + folder_path + '"...')
    print_blank_line()

def ensure_submission_folder_exists(prog_input):
    folder_path = derive_folder_path_from_input(prog_input)
    print_whether_file_or_folder_exists(folder_path)
    ensure_folder_exists(folder_path)

def ensure_submission_readme_exists(prog_input):
    folder_path = derive_folder_path_from_input(prog_input)
    readme_path = folder_path + '/README.md'
    print_whether_file_or_folder_exists(readme_path)
    readme_content = derive_readme_content_from_input(prog_input)
    make_file_if_path_does_not_exist(readme_content, readme_path, prog_input.verbose)

def ensure_submission_exists(prog_input):
    ensure_submission_folder_exists(prog_input)
    ensure_submission_readme_exists(prog_input)
    print('Complete!')
    print_blank_line()

def main():
    prog_input = handle_input()
    print_blank_line()
    print_parsed_args(prog_input)
    ensure_submission_exists(prog_input)

main()
